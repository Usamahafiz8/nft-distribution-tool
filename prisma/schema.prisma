// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model VirtualItem {
  id                        String   @id @default(cuid())
  platform                  String
  platformUrl              String?
  intellectualProperty      String?
  ageRating                 String?
  category                  String
  type                      String
  subType                   String?
  title                     String
  mintSupply                String?
  includeSerialNumber       String?
  preMintCount              String?
  reservedSerialNumbers     String?
  serialNumberTransferOrder String?
  purchaseCurrency1         String?
  purchasePrice1            String?
  andOr                     String?
  purchaseCurrency2         String?
  purchasePrice2            String?
  unlockCurrency            String?
  unlockThreshold           String?
  mediaPrimaryGoogleUrl     String?
  mediaDisplayGoogleUrl     String?
  mediaPrimaryS3Bucket      String?
  mediaDisplayS3Bucket      String?
  transferability           String?
  p2pSaleRoyalty           String?
  description               String?
  mintLimitPerWallet        String?
  p2pLimitPerWallet         String?
  collection                String?
  series                    String?
  episode                   String?
  set                       String?
  season                    String?
  level                     String?
  rank                      String?
  enhancement               String?
  levelRankUpgradeType      String?
  artist                    String?
  editionType               String?
  rarity                    String?
  bonusMediaUrl             String?
  copyright                 String?
  comments                  String?
  createdAt                 DateTime @default(now())
  updatedAt                 DateTime @updatedAt

  @@map("virtual_items")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts Account[]
  sessions Session[]

  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  oauth_token_secret String?
  oauth_token       String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  id         Int      @id @default(autoincrement())
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Wallet {
  id        String @id @default(cuid())
  address   String @unique
  userEmail String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("wallets")
}